# Fetching the AMI

data "aws_ami" "ami" {
  most_recent = true
  owners      = ["self"]
  filter {
    name   = "name"
    values = ["sidhu*"]
  }
}

# VPC Infrastructure

resource "aws_vpc" "sidhu_vpc" {
  cidr_block = "55.0.0.0/20" # Total range: 55.0.0.0 - 55.0.15.255
  tags = {
    Name = "sidhu_vpc"
  }
}

# Public Subnet 1

resource "aws_subnet" "public1" {
  vpc_id            = aws_vpc.sidhu_vpc.id
  cidr_block        = "55.0.0.0/24" # 55.0.0.0 - 55.0.0.255
  availability_zone = "us-west-2a"
  map_public_ip_on_launch = true
  tags = {
    Name = "public1"
  }
}

# Public Subnet 2

resource "aws_subnet" "public2" {
  vpc_id            = aws_vpc.sidhu_vpc.id
  cidr_block        = "55.0.1.0/24" # 55.0.1.0 - 55.0.1.255
  availability_zone = "us-west-2b"
  map_public_ip_on_launch = true
  tags = {
    Name = "public2"
  }
}

# Private Subnet 1

resource "aws_subnet" "private1" {
  vpc_id            = aws_vpc.sidhu_vpc.id
  cidr_block        = "55.0.2.0/24" # 55.0.2.0 - 55.0.2.255
  availability_zone = "us-west-2a"
  tags = {
    Name = "private1"
  }
}

# Private Subnet 2

resource "aws_subnet" "private2" {
  vpc_id            = aws_vpc.sidhu_vpc.id
  cidr_block        = "55.0.3.0/24" # 55.0.3.0 - 55.0.3.255
  availability_zone = "us-west-2b"
  tags = {
    Name = "private2"
  }
}

# Creating IGW

resource "aws_internet_gateway" "sidhu-IGW" {
  vpc_id = aws_vpc.sidhu_vpc.id
  tags = {
    Name = "sidhu-IGW"
  }
}

# Creating Route Table

resource "aws_route_table" "rt"{
  vpc_id = aws_vpc.sidhu_vpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.sidhu-IGW.id
  }
  tags = {
    Name = "sidhu-RT"
  }
}

# Attaching with Route Table Association

resource "aws_route_table_association" "public1" {
  subnet_id      = aws_subnet.public1.id
  route_table_id = aws_route_table.rt.id
}

resource "aws_route_table_association" "public2" {
  subnet_id      = aws_subnet.public2.id
  route_table_id = aws_route_table.rt.id
}


# Security group

resource "aws_security_group" "EBS_SG_OLD" {
  vpc_id = aws_vpc.sidhu_vpc.id
  name = "EBS_SG_OLD"
  description = "Allow SSH HTTP HTTPS"

  ingress{
    description = "ssh"
    from_port = 22
    to_port = 22
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress{
    description = "http"
    from_port = 80
    to_port = 80
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress{
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "EBS_SG_OLD"
  }
}

# Launch Template

resource "aws_launch_template" "launch_template" {
  name_prefix     = "launch_template"
  image_id        = data.aws_ami.ami.id
  instance_type   = "t2.micro"
  key_name        = "sanjay"

  network_interfaces {
    security_groups = [aws_security_group.EBS_SG_OLD.id]
  }

  tag_specifications {
    resource_type = "instance"

    tags = {
      Name = "sidhu-instance"
    }
  }
}

# Auto Scaling Group

resource "aws_autoscaling_group" "autoscaling" {
  name              = "autoscaling"
  max_size          = 5
  desired_capacity  = 4
  min_size          = 3
  #vpc_zone_identifier = [aws_subnet.public1.id,aws_subnet.public2.id] # Replace with your subnet IDs
  vpc_zone_identifier = [
    aws_subnet.public1.id,
    aws_subnet.public2.id,
    aws_subnet.private1.id,
    aws_subnet.private2.id
  ]
  #security_groups = [aws_security_group.EBS_SG_OLD.id]
  load_balancers = [aws_elb.classic_lb.name]
  health_check_grace_period  = 600  # Increase grace period to 10 minutes

  launch_template {
    id      = aws_launch_template.launch_template.id
    version = "$Latest"
  }

  tag {
    key                 = "Name"
    value               = "autoscaling-instance"
    propagate_at_launch = true
  }
}


# resource "aws_instance" "HelloWorld" {
#   ami           = data.aws_ami.instance.id
#   instance_type = var.machinetype
#   key_name      = "sanjay"
#
#   tags = {
#     Name = "sidhu"
#   }
# }


